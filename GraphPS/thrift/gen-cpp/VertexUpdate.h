/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef VertexUpdate_H
#define VertexUpdate_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "graphps_types.h"

namespace graphps {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class VertexUpdateIf {
 public:
  virtual ~VertexUpdateIf() {}
  virtual int32_t ping(const int32_t id) = 0;
  virtual int32_t update_vertex_sparse(const int32_t pid, const VidDtype vlen, const std::vector<VidDtype> & vid, const std::vector<VmsgDtype> & vmsg) = 0;
  virtual int32_t update_vertex_dense(const int32_t pid, const VidDtype vlen, const VidDtype start_id, const std::vector<VmsgDtype> & vmsg) = 0;
};

class VertexUpdateIfFactory {
 public:
  typedef VertexUpdateIf Handler;

  virtual ~VertexUpdateIfFactory() {}

  virtual VertexUpdateIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(VertexUpdateIf* /* handler */) = 0;
};

class VertexUpdateIfSingletonFactory : virtual public VertexUpdateIfFactory {
 public:
  VertexUpdateIfSingletonFactory(const boost::shared_ptr<VertexUpdateIf>& iface) : iface_(iface) {}
  virtual ~VertexUpdateIfSingletonFactory() {}

  virtual VertexUpdateIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(VertexUpdateIf* /* handler */) {}

 protected:
  boost::shared_ptr<VertexUpdateIf> iface_;
};

class VertexUpdateNull : virtual public VertexUpdateIf {
 public:
  virtual ~VertexUpdateNull() {}
  int32_t ping(const int32_t /* id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t update_vertex_sparse(const int32_t /* pid */, const VidDtype /* vlen */, const std::vector<VidDtype> & /* vid */, const std::vector<VmsgDtype> & /* vmsg */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t update_vertex_dense(const int32_t /* pid */, const VidDtype /* vlen */, const VidDtype /* start_id */, const std::vector<VmsgDtype> & /* vmsg */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _VertexUpdate_ping_args__isset {
  _VertexUpdate_ping_args__isset() : id(false) {}
  bool id :1;
} _VertexUpdate_ping_args__isset;

class VertexUpdate_ping_args {
 public:

  VertexUpdate_ping_args(const VertexUpdate_ping_args&);
  VertexUpdate_ping_args& operator=(const VertexUpdate_ping_args&);
  VertexUpdate_ping_args() : id(0) {
  }

  virtual ~VertexUpdate_ping_args() throw();
  int32_t id;

  _VertexUpdate_ping_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const VertexUpdate_ping_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const VertexUpdate_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VertexUpdate_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VertexUpdate_ping_pargs {
 public:


  virtual ~VertexUpdate_ping_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VertexUpdate_ping_result__isset {
  _VertexUpdate_ping_result__isset() : success(false) {}
  bool success :1;
} _VertexUpdate_ping_result__isset;

class VertexUpdate_ping_result {
 public:

  VertexUpdate_ping_result(const VertexUpdate_ping_result&);
  VertexUpdate_ping_result& operator=(const VertexUpdate_ping_result&);
  VertexUpdate_ping_result() : success(0) {
  }

  virtual ~VertexUpdate_ping_result() throw();
  int32_t success;

  _VertexUpdate_ping_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const VertexUpdate_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VertexUpdate_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VertexUpdate_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VertexUpdate_ping_presult__isset {
  _VertexUpdate_ping_presult__isset() : success(false) {}
  bool success :1;
} _VertexUpdate_ping_presult__isset;

class VertexUpdate_ping_presult {
 public:


  virtual ~VertexUpdate_ping_presult() throw();
  int32_t* success;

  _VertexUpdate_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VertexUpdate_update_vertex_sparse_args__isset {
  _VertexUpdate_update_vertex_sparse_args__isset() : pid(false), vlen(false), vid(false), vmsg(false) {}
  bool pid :1;
  bool vlen :1;
  bool vid :1;
  bool vmsg :1;
} _VertexUpdate_update_vertex_sparse_args__isset;

class VertexUpdate_update_vertex_sparse_args {
 public:

  VertexUpdate_update_vertex_sparse_args(const VertexUpdate_update_vertex_sparse_args&);
  VertexUpdate_update_vertex_sparse_args& operator=(const VertexUpdate_update_vertex_sparse_args&);
  VertexUpdate_update_vertex_sparse_args() : pid(0), vlen(0) {
  }

  virtual ~VertexUpdate_update_vertex_sparse_args() throw();
  int32_t pid;
  VidDtype vlen;
  std::vector<VidDtype>  vid;
  std::vector<VmsgDtype>  vmsg;

  _VertexUpdate_update_vertex_sparse_args__isset __isset;

  void __set_pid(const int32_t val);

  void __set_vlen(const VidDtype val);

  void __set_vid(const std::vector<VidDtype> & val);

  void __set_vmsg(const std::vector<VmsgDtype> & val);

  bool operator == (const VertexUpdate_update_vertex_sparse_args & rhs) const
  {
    if (!(pid == rhs.pid))
      return false;
    if (!(vlen == rhs.vlen))
      return false;
    if (!(vid == rhs.vid))
      return false;
    if (!(vmsg == rhs.vmsg))
      return false;
    return true;
  }
  bool operator != (const VertexUpdate_update_vertex_sparse_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VertexUpdate_update_vertex_sparse_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VertexUpdate_update_vertex_sparse_pargs {
 public:


  virtual ~VertexUpdate_update_vertex_sparse_pargs() throw();
  const int32_t* pid;
  const VidDtype* vlen;
  const std::vector<VidDtype> * vid;
  const std::vector<VmsgDtype> * vmsg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VertexUpdate_update_vertex_sparse_result__isset {
  _VertexUpdate_update_vertex_sparse_result__isset() : success(false) {}
  bool success :1;
} _VertexUpdate_update_vertex_sparse_result__isset;

class VertexUpdate_update_vertex_sparse_result {
 public:

  VertexUpdate_update_vertex_sparse_result(const VertexUpdate_update_vertex_sparse_result&);
  VertexUpdate_update_vertex_sparse_result& operator=(const VertexUpdate_update_vertex_sparse_result&);
  VertexUpdate_update_vertex_sparse_result() : success(0) {
  }

  virtual ~VertexUpdate_update_vertex_sparse_result() throw();
  int32_t success;

  _VertexUpdate_update_vertex_sparse_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const VertexUpdate_update_vertex_sparse_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VertexUpdate_update_vertex_sparse_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VertexUpdate_update_vertex_sparse_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VertexUpdate_update_vertex_sparse_presult__isset {
  _VertexUpdate_update_vertex_sparse_presult__isset() : success(false) {}
  bool success :1;
} _VertexUpdate_update_vertex_sparse_presult__isset;

class VertexUpdate_update_vertex_sparse_presult {
 public:


  virtual ~VertexUpdate_update_vertex_sparse_presult() throw();
  int32_t* success;

  _VertexUpdate_update_vertex_sparse_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VertexUpdate_update_vertex_dense_args__isset {
  _VertexUpdate_update_vertex_dense_args__isset() : pid(false), vlen(false), start_id(false), vmsg(false) {}
  bool pid :1;
  bool vlen :1;
  bool start_id :1;
  bool vmsg :1;
} _VertexUpdate_update_vertex_dense_args__isset;

class VertexUpdate_update_vertex_dense_args {
 public:

  VertexUpdate_update_vertex_dense_args(const VertexUpdate_update_vertex_dense_args&);
  VertexUpdate_update_vertex_dense_args& operator=(const VertexUpdate_update_vertex_dense_args&);
  VertexUpdate_update_vertex_dense_args() : pid(0), vlen(0), start_id(0) {
  }

  virtual ~VertexUpdate_update_vertex_dense_args() throw();
  int32_t pid;
  VidDtype vlen;
  VidDtype start_id;
  std::vector<VmsgDtype>  vmsg;

  _VertexUpdate_update_vertex_dense_args__isset __isset;

  void __set_pid(const int32_t val);

  void __set_vlen(const VidDtype val);

  void __set_start_id(const VidDtype val);

  void __set_vmsg(const std::vector<VmsgDtype> & val);

  bool operator == (const VertexUpdate_update_vertex_dense_args & rhs) const
  {
    if (!(pid == rhs.pid))
      return false;
    if (!(vlen == rhs.vlen))
      return false;
    if (!(start_id == rhs.start_id))
      return false;
    if (!(vmsg == rhs.vmsg))
      return false;
    return true;
  }
  bool operator != (const VertexUpdate_update_vertex_dense_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VertexUpdate_update_vertex_dense_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VertexUpdate_update_vertex_dense_pargs {
 public:


  virtual ~VertexUpdate_update_vertex_dense_pargs() throw();
  const int32_t* pid;
  const VidDtype* vlen;
  const VidDtype* start_id;
  const std::vector<VmsgDtype> * vmsg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VertexUpdate_update_vertex_dense_result__isset {
  _VertexUpdate_update_vertex_dense_result__isset() : success(false) {}
  bool success :1;
} _VertexUpdate_update_vertex_dense_result__isset;

class VertexUpdate_update_vertex_dense_result {
 public:

  VertexUpdate_update_vertex_dense_result(const VertexUpdate_update_vertex_dense_result&);
  VertexUpdate_update_vertex_dense_result& operator=(const VertexUpdate_update_vertex_dense_result&);
  VertexUpdate_update_vertex_dense_result() : success(0) {
  }

  virtual ~VertexUpdate_update_vertex_dense_result() throw();
  int32_t success;

  _VertexUpdate_update_vertex_dense_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const VertexUpdate_update_vertex_dense_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VertexUpdate_update_vertex_dense_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VertexUpdate_update_vertex_dense_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VertexUpdate_update_vertex_dense_presult__isset {
  _VertexUpdate_update_vertex_dense_presult__isset() : success(false) {}
  bool success :1;
} _VertexUpdate_update_vertex_dense_presult__isset;

class VertexUpdate_update_vertex_dense_presult {
 public:


  virtual ~VertexUpdate_update_vertex_dense_presult() throw();
  int32_t* success;

  _VertexUpdate_update_vertex_dense_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class VertexUpdateClient : virtual public VertexUpdateIf {
 public:
  VertexUpdateClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  VertexUpdateClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping(const int32_t id);
  void send_ping(const int32_t id);
  int32_t recv_ping();
  int32_t update_vertex_sparse(const int32_t pid, const VidDtype vlen, const std::vector<VidDtype> & vid, const std::vector<VmsgDtype> & vmsg);
  void send_update_vertex_sparse(const int32_t pid, const VidDtype vlen, const std::vector<VidDtype> & vid, const std::vector<VmsgDtype> & vmsg);
  int32_t recv_update_vertex_sparse();
  int32_t update_vertex_dense(const int32_t pid, const VidDtype vlen, const VidDtype start_id, const std::vector<VmsgDtype> & vmsg);
  void send_update_vertex_dense(const int32_t pid, const VidDtype vlen, const VidDtype start_id, const std::vector<VmsgDtype> & vmsg);
  int32_t recv_update_vertex_dense();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class VertexUpdateProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<VertexUpdateIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (VertexUpdateProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_vertex_sparse(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_vertex_dense(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  VertexUpdateProcessor(boost::shared_ptr<VertexUpdateIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &VertexUpdateProcessor::process_ping;
    processMap_["update_vertex_sparse"] = &VertexUpdateProcessor::process_update_vertex_sparse;
    processMap_["update_vertex_dense"] = &VertexUpdateProcessor::process_update_vertex_dense;
  }

  virtual ~VertexUpdateProcessor() {}
};

class VertexUpdateProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  VertexUpdateProcessorFactory(const ::boost::shared_ptr< VertexUpdateIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< VertexUpdateIfFactory > handlerFactory_;
};

class VertexUpdateMultiface : virtual public VertexUpdateIf {
 public:
  VertexUpdateMultiface(std::vector<boost::shared_ptr<VertexUpdateIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~VertexUpdateMultiface() {}
 protected:
  std::vector<boost::shared_ptr<VertexUpdateIf> > ifaces_;
  VertexUpdateMultiface() {}
  void add(boost::shared_ptr<VertexUpdateIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t ping(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(id);
    }
    return ifaces_[i]->ping(id);
  }

  int32_t update_vertex_sparse(const int32_t pid, const VidDtype vlen, const std::vector<VidDtype> & vid, const std::vector<VmsgDtype> & vmsg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_vertex_sparse(pid, vlen, vid, vmsg);
    }
    return ifaces_[i]->update_vertex_sparse(pid, vlen, vid, vmsg);
  }

  int32_t update_vertex_dense(const int32_t pid, const VidDtype vlen, const VidDtype start_id, const std::vector<VmsgDtype> & vmsg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_vertex_dense(pid, vlen, start_id, vmsg);
    }
    return ifaces_[i]->update_vertex_dense(pid, vlen, start_id, vmsg);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class VertexUpdateConcurrentClient : virtual public VertexUpdateIf {
 public:
  VertexUpdateConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  VertexUpdateConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping(const int32_t id);
  int32_t send_ping(const int32_t id);
  int32_t recv_ping(const int32_t seqid);
  int32_t update_vertex_sparse(const int32_t pid, const VidDtype vlen, const std::vector<VidDtype> & vid, const std::vector<VmsgDtype> & vmsg);
  int32_t send_update_vertex_sparse(const int32_t pid, const VidDtype vlen, const std::vector<VidDtype> & vid, const std::vector<VmsgDtype> & vmsg);
  int32_t recv_update_vertex_sparse(const int32_t seqid);
  int32_t update_vertex_dense(const int32_t pid, const VidDtype vlen, const VidDtype start_id, const std::vector<VmsgDtype> & vmsg);
  int32_t send_update_vertex_dense(const int32_t pid, const VidDtype vlen, const VidDtype start_id, const std::vector<VmsgDtype> & vmsg);
  int32_t recv_update_vertex_dense(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
